local platypus = require "platypus.platypus"

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")
local UP = hash("up")
local DOWN = hash("down")
local TOGGLE_DEBUG = hash("toggle_debug")
local TOGGLE_PROFILE = hash("toggle_profile")

local ANIM_RUN = hash("run")
local ANIM_JUMP = hash("jump")
local ANIM_FALL = hash("fall")
local ANIM_IDLE = hash("idle")
local ANIM_CLIMB = hash("climb")
local ANIM_CLIMB_IDLE = hash("climb_idle")
local ANIM_CROUCH = hash("crouch")
local ANIM_CROUCH_IDLE = hash("crouch_idle")

local DEFAULT_COLLISIONS = { left = 4, right = 4, top = 6, bottom = 6 }

local COLLISIONS = {
	[ANIM_RUN] = DEFAULT_COLLISIONS,
	[ANIM_JUMP] = DEFAULT_COLLISIONS,
	[ANIM_IDLE] = DEFAULT_COLLISIONS,
	[ANIM_CLIMB] = DEFAULT_COLLISIONS,
	[ANIM_CLIMB_IDLE] = DEFAULT_COLLISIONS,
	[ANIM_CROUCH] = { left = 4, right = 4, top = 1, bottom = 6 },
	[ANIM_CROUCH_IDLE] = { left = 4, right = 4, top = 1, bottom = 6 },
}


local function play_animation(self, animation)
	if self.current_animation ~= animation then
		sprite.play_flipbook("#sprite", animation)
		self.current_animation = animation
		self.platypus.set_collisions(COLLISIONS[animation] or DEFAULT_COLLISIONS)
	end
end


function init(self)
	msg.post(".", "acquire_input_focus")
	self.input_state = {}
	self.platypus = platypus.create({
		collisions = {
			separation = platypus.SEPARATION_RAYS,
			groups = {
				[hash("ground")] = platypus.DIR_ALL,
				--[hash("onewayplatform")] = platypus.DIR_ALL,
				[hash("onewayplatform")] = platypus.DIR_DOWN,
				[hash("onewaydoor")] = platypus.DIR_LEFT,
			},
			left = 4, right = 4, top = 7, bottom = 6, offset = vmath.vector3(0, 7, 0)
		},
		gravity = -800,
		max_velocity = 300,
		allow_double_jump = true,
		allow_wall_jump = true,
		allow_wall_slide = true,
		wall_slide_gravity = -50,
		debug = true,
	})
	self.current_animation = nil
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.008, 0.090, 0.129, 1.0) })
end

local function get_horizontal_speed(self)
	if self.climbing then
		return 50
	elseif self.crouching then
		return 25
	elseif self.platypus.has_ground_contact() then
		return 100
	else
		return 80
	end
end

local function get_horizontal_animation(self)
	if self.climbing then
		return ANIM_CLIMB
	elseif self.crouching then
		return ANIM_CROUCH
	elseif self.platypus.has_ground_contact() then
		return ANIM_RUN
	else
		return ANIM_FALL
	end
end

local function climb_up(self)
	play_animation(self, ANIM_CLIMB)
	self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.up(60)
end

local function climb_down(self)
	play_animation(self, ANIM_CLIMB)
	self.climbing = true
	self.platypus.gravity = 0
	self.platypus.velocity.y = 0
	self.platypus.down(80)
end

local function crouch(self)
	play_animation(self, ANIM_CROUCH_IDLE)
	self.crouching = true
end

local function fall(self)
	play_animation(self, ANIM_RUN)
	self.crouching = false
end

local function move_left(self)
	self.platypus.left(get_horizontal_speed(self))
	play_animation(self, get_horizontal_animation(self))
	sprite.set_hflip("#sprite", true)
end

local function move_right(self)
	self.platypus.right(get_horizontal_speed(self))
	play_animation(self, get_horizontal_animation(self))
	sprite.set_hflip("#sprite", false)
end

function update(self, dt)
	local ground_contact = self.platypus.has_ground_contact()
	local ceiling_contact = self.platypus.has_ceiling_contact()
	local updown = self.input_state[UP] or self.input_state[DOWN]
	local leftright = self.input_state[LEFT] or self.input_state[RIGHT]
	local idle = not (updown or leftright)
	if self.input_state[UP] then
		if self.ladder_contact then
			climb_up(self)
		end
	elseif self.input_state[DOWN] then
		if not ground_contact and self.ladder_contact then
			climb_down(self)
		elseif ground_contact and (not self.crouching or not leftright) then
			crouch(self)
		end
	elseif ground_contact and ceiling_contact then
		crouch(self)
	else
		self.crouching = false
	end

	if self.input_state[LEFT] then
		move_left(self)
	elseif self.input_state[RIGHT] then
		move_right(self)
	end

	if idle then
		self.platypus.abort_wall_slide()
		if self.climbing then
			play_animation(self, ANIM_CLIMB_IDLE)
		elseif self.crouching then
			play_animation(self, ANIM_CROUCH_IDLE)
		elseif ground_contact then
			play_animation(self, ANIM_IDLE)
		else
			play_animation(self, ANIM_JUMP)
		end
	end
	self.platypus.update(dt)
end


local function handle_action(self, action_id, action)
	if not action_id then return end
	if action.pressed then
		self.input_state[action_id] = true
	elseif action.released then
		self.input_state[action_id] = nil
	end

	if action_id == JUMP then
		if action.pressed then
			self.platypus.jump(300)
		elseif action.released then
			self.platypus.abort_jump()
		end
	elseif action_id == TOGGLE_PROFILE and action.released then
		msg.post("@system:", "toggle_profile")
	elseif action_id == TOGGLE_DEBUG and action.released then
		self.platypus.toggle_debug()
		msg.post("@system:", "toggle_physics_debug")
	end
end


function on_message(self, message_id, message, sender)
	self.platypus.on_message(message_id, message, sender)
	if message_id == platypus.GROUND_CONTACT then
		print("Ground contact")
	elseif message_id == platypus.WALL_CONTACT then
		print("Wall contact")
	elseif message_id == platypus.FALLING then
		fall(self)
	elseif message_id == platypus.WALL_JUMP then
		sprite.set_hflip("#sprite", self.platypus.velocity.x < 0)
	elseif message_id == hash("onscreen") then
		if message.id == hash("left") then
			handle_action(self, LEFT, message)
		elseif message.id == hash("right") then
			handle_action(self, RIGHT, message)
		elseif message.id == hash("jump") then
			handle_action(self, JUMP, message)
		end
	elseif message_id == hash("trigger_response") then
		if message.other_group == hash("ladder") then
			if message.enter then
				self.ladder_contact = true
			else
				self.platypus.gravity = -800
				self.ladder_contact = false
				self.climbing = false
			end
		end
	end
end

function on_input(self, action_id, action)
	handle_action(self, action_id, action)
end
